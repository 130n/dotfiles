# SBAB-config & aliases 2023-06-29
#
alias toggle-sbab='echo "WORKMODE=$((1-WORKMODE))" > ~/.workmode && source ~/.workmode && source ~/.sbabrc'

export NODE_EXTRA_CA_CERTS=/Users/lhen/certs/SBABBankRootCA1.pem

defaults write com.google.Chrome AuthNegotiateDelegateWhitelist "*.sbab.ad,*.sbab.se,banketten"
defaults write com.google.Chrome AuthServerWhitelist "*.sbab.ad,*.sbab.se,banketten"
alias ansiblectl='docker run -it --rm -v /Users/lhen/dev/projects/ansible/talos_ansible:/ansible nexus.common.sbab.se:18443/se.sbab/ansible-controller'

alias kre-sys="docker run -t --rm --name kresys --env KRE_ENV='sys' --env SCREEN_SIZE=1920x1100x16 -p 7777:6900 kre:latest &"
alias kre-acc="docker run -t --rm --name kreacc --env KRE_ENV='acc' --env SCREEN_SIZE=1920x1100x16 -p 8888:6900 kre:latest &"
alias kre-stage="docker run -t --rm --name krestage --env KRE_ENV='stage' --env SCREEN_SIZE=1920x1100x16 -p 9999:6900 kre:latest &"
alias kresys-make="cd ~/dev/dockerized-kre && make sys"
alias kreacc-make="cd ~/dev/dockerized-kre && make acc"
alias krestage-make="cd ~/dev/dockerized-kre && make stage"

alias reset-pulsesecure="sudo launchctl unload -w /Library/LaunchDaemons/net.pulsesecure.AccessService.plist && sudo launchctl load -w /Library/LaunchDaemons/net.pulsesecure.AccessService.plist"

alias kinitsa="kinit sa-lhen"
alias jump="ssh -K SA-lhen@<redacted-jumpserver>"
alias jumpora="ssh -K SA-lhen@<redacted-jumpserver>"
alias init-rvm="source /Users/lhen/.rvm/scripts/rvm"

generate-pdf() {
	sbab_jwt=`token`
  echo "Template "$1
  echo "Data "$2
  curl -X 'POST' \
  'https://k8sproxy.stage.sbab.se/document-converter/generator/json?format=PDF' \
  -H 'accept: */*' \
  -H 'Client-Channel: WEB' \
  -H 'Authorization: Bearer '$sbab_jwt \
  -H 'Content-Type: multipart/form-data' \
  -F 'template=@'$1';type=application/vnd.openxmlformats-officedocument.wordprocessingml.document' \
  -F 'jsonDataFile=@'$2';type=application/json' -o data_response.json \
  && cat data_response.json | jq -r .data | base64 -d > generated.pdf && open generated.pdf
}

## START token script
# Example alias to quickly generate token for a role
# alias pauth='token sys_partner_info:bytkod'

env=sys
# scope=`echo "CLIENT  PARTNER_INFO SCOPE_LOAN_READ SCOPE_ACCOUNT_READ USER ad-user" | sed "s/ /%2C/g"`
scope=`echo "SCOPE_ACCOUNT_WRITE USER SCOPE_LOAN_READ SCOPE_ACCOUNT_READ SCOPE_STAKEHOLDER_READ SCOPE_ROLE_BI INTERNAL PD_CLASSIFICATION SCOPE_PD_CLASSIFICATION PD_CLASSIFICATION_VIEW SCOPE_PD_CLASSIFICATION_VIEW SCOPE_CLIENT LGD_API ROLE_BI PD_CLASSIFICATION PD_CLASSIFICATION_VIEW pdClassification ROLE_CLIENT" | sed "s/ /%2C/g"`
skill="ROLE_BI%2CPD_CLASSIFICATION%2CPD_CLASSIFICATION_VIEW%2CpdClassification%2CROLE_CLIENT"
user=microservice
client=retina

function mock_token() {
 url="http://lb$env-intern.sbab.se:8888/partner-auth-service"
 curl_url="$url/v1/mockauth/mockraw?user_id=$user&rawscope=$scope&client_id=$client&ttl=28800&skill=$skill" 
#echo "URL: $curl_url"
 response=$(curl -X GET $curl_url -sb \
  -H "accept: application/json" \
  -H "client-id: retina")
 jwt_token=$(echo $response | jq .user_token -r)
 access_token=$(echo $response | jq .access_token -r)
 echo $response
}

function get_token() {
 # End with the line feed 0x0A sequence \cZ (C-Z)
 authorization_role=`echo -e "$@\cZ" | base64`

 curl -s --location --request POST "$url/v1/auth/token" \
  --header "Authorization: Basic $authorization_role" \
  --header "Content-Type: application/x-www-form-urlencoded" \
  --data-urlencode "grant_type=client_credentials"
}

function extract() {
#echo $@
 echo $@ | jq --raw-output .user_token
}

function token() {
if [ $# -eq 0 ] ; then
 extract `mock_token`
else
 extract `get_token "$1"`
fi
}
test -e ~/dotfiles/functions/configure_cert.sh && source ~/dotfiles/functions/configure_cert.sh
alias mock_jwt="mock_token | jq .user_token -r | clipcopy"
alias mock_at="mock_token | jq .access_token -r | clipcopy"
## END token script

# IS & vagrant vars
export MODSECURITY_SOURCE="/Users/lhen/dev/modsecurity"
export IS_DOMAIN_ROOT="/Users/lhen/dev/is-domain"

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
export PDFREACTOR_LICENSE_KEY=""

